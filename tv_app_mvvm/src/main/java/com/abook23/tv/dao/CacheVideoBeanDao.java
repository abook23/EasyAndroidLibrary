package com.abook23.tv.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.abook23.tv.ben.CacheVideoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE_VIDEO_BEAN".
*/
public class CacheVideoBeanDao extends AbstractDao<CacheVideoBean, String> {

    public static final String TABLENAME = "CACHE_VIDEO_BEAN";

    /**
     * Properties of entity CacheVideoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "URL");
        public final static Property V_id = new Property(1, Long.class, "v_id", false, "V_ID");
        public final static Property V_num = new Property(2, int.class, "v_num", false, "V_NUM");
        public final static Property Download_progress = new Property(3, long.class, "download_progress", false, "DOWNLOAD_PROGRESS");
        public final static Property Download_max = new Property(4, long.class, "download_max", false, "DOWNLOAD_MAX");
        public final static Property Download_pause = new Property(5, boolean.class, "download_pause", false, "DOWNLOAD_PAUSE");
        public final static Property Download_complete = new Property(6, boolean.class, "download_complete", false, "DOWNLOAD_COMPLETE");
        public final static Property Play_rate = new Property(7, String.class, "play_rate", false, "PLAY_RATE");
    }


    public CacheVideoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CacheVideoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE_VIDEO_BEAN\" (" + //
                "\"URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: url
                "\"V_ID\" INTEGER," + // 1: v_id
                "\"V_NUM\" INTEGER NOT NULL ," + // 2: v_num
                "\"DOWNLOAD_PROGRESS\" INTEGER NOT NULL ," + // 3: download_progress
                "\"DOWNLOAD_MAX\" INTEGER NOT NULL ," + // 4: download_max
                "\"DOWNLOAD_PAUSE\" INTEGER NOT NULL ," + // 5: download_pause
                "\"DOWNLOAD_COMPLETE\" INTEGER NOT NULL ," + // 6: download_complete
                "\"PLAY_RATE\" TEXT);"); // 7: play_rate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE_VIDEO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CacheVideoBean entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        Long v_id = entity.getV_id();
        if (v_id != null) {
            stmt.bindLong(2, v_id);
        }
        stmt.bindLong(3, entity.getV_num());
        stmt.bindLong(4, entity.getDownload_progress());
        stmt.bindLong(5, entity.getDownload_max());
        stmt.bindLong(6, entity.getDownload_pause() ? 1L: 0L);
        stmt.bindLong(7, entity.getDownload_complete() ? 1L: 0L);
 
        String play_rate = entity.getPlay_rate();
        if (play_rate != null) {
            stmt.bindString(8, play_rate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CacheVideoBean entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        Long v_id = entity.getV_id();
        if (v_id != null) {
            stmt.bindLong(2, v_id);
        }
        stmt.bindLong(3, entity.getV_num());
        stmt.bindLong(4, entity.getDownload_progress());
        stmt.bindLong(5, entity.getDownload_max());
        stmt.bindLong(6, entity.getDownload_pause() ? 1L: 0L);
        stmt.bindLong(7, entity.getDownload_complete() ? 1L: 0L);
 
        String play_rate = entity.getPlay_rate();
        if (play_rate != null) {
            stmt.bindString(8, play_rate);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CacheVideoBean readEntity(Cursor cursor, int offset) {
        CacheVideoBean entity = new CacheVideoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // v_id
            cursor.getInt(offset + 2), // v_num
            cursor.getLong(offset + 3), // download_progress
            cursor.getLong(offset + 4), // download_max
            cursor.getShort(offset + 5) != 0, // download_pause
            cursor.getShort(offset + 6) != 0, // download_complete
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // play_rate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CacheVideoBean entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setV_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setV_num(cursor.getInt(offset + 2));
        entity.setDownload_progress(cursor.getLong(offset + 3));
        entity.setDownload_max(cursor.getLong(offset + 4));
        entity.setDownload_pause(cursor.getShort(offset + 5) != 0);
        entity.setDownload_complete(cursor.getShort(offset + 6) != 0);
        entity.setPlay_rate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CacheVideoBean entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(CacheVideoBean entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CacheVideoBean entity) {
        return entity.getUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
